schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
The Account model is for information about OAuth accounts associated with a User. It will usually contain access_token, id_token and other OAuth specific data. TokenSet from openid-client might give you an idea of all the fields.


columns and relationships of "account"

"""
type account {
  access_token: String
  expires_at: Int
  id: Int!
  id_token: String!
  oauth_token: String!
  oauth_token_secret: String!
  provider: String!
  provider_account_id: String!
  refresh_token: String!
  scope: String!
  session_state: String!
  token_type: String
  type: String!
  user_id: String!
}

"""
aggregated selection of "account"
"""
type account_aggregate {
  aggregate: account_aggregate_fields
  nodes: [account!]!
}

"""
aggregate fields of "account"
"""
type account_aggregate_fields {
  avg: account_avg_fields
  count(columns: [account_select_column!], distinct: Boolean): Int!
  max: account_max_fields
  min: account_min_fields
  stddev: account_stddev_fields
  stddev_pop: account_stddev_pop_fields
  stddev_samp: account_stddev_samp_fields
  sum: account_sum_fields
  var_pop: account_var_pop_fields
  var_samp: account_var_samp_fields
  variance: account_variance_fields
}

"""aggregate avg on columns"""
type account_avg_fields {
  expires_at: Float
  id: Float
}

"""
Boolean expression to filter rows from the table "account". All fields are combined with a logical 'AND'.
"""
input account_bool_exp {
  _and: [account_bool_exp!]
  _not: account_bool_exp
  _or: [account_bool_exp!]
  access_token: String_comparison_exp
  expires_at: Int_comparison_exp
  id: Int_comparison_exp
  id_token: String_comparison_exp
  oauth_token: String_comparison_exp
  oauth_token_secret: String_comparison_exp
  provider: String_comparison_exp
  provider_account_id: String_comparison_exp
  refresh_token: String_comparison_exp
  scope: String_comparison_exp
  session_state: String_comparison_exp
  token_type: String_comparison_exp
  type: String_comparison_exp
  user_id: String_comparison_exp
}

"""
unique or primary key constraints on table "account"
"""
enum account_constraint {
  """unique or primary key constraint"""
  account_pkey
}

"""
input type for incrementing numeric columns in table "account"
"""
input account_inc_input {
  expires_at: Int
  id: Int
}

"""
input type for inserting data into table "account"
"""
input account_insert_input {
  access_token: String
  expires_at: Int
  id: Int
  id_token: String
  oauth_token: String
  oauth_token_secret: String
  provider: String
  provider_account_id: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  user_id: String
}

"""aggregate max on columns"""
type account_max_fields {
  access_token: String
  expires_at: Int
  id: Int
  id_token: String
  oauth_token: String
  oauth_token_secret: String
  provider: String
  provider_account_id: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  user_id: String
}

"""aggregate min on columns"""
type account_min_fields {
  access_token: String
  expires_at: Int
  id: Int
  id_token: String
  oauth_token: String
  oauth_token_secret: String
  provider: String
  provider_account_id: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  user_id: String
}

"""
response of any mutation on the table "account"
"""
type account_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [account!]!
}

"""
on conflict condition type for table "account"
"""
input account_on_conflict {
  constraint: account_constraint!
  update_columns: [account_update_column!]! = []
  where: account_bool_exp
}

"""Ordering options when selecting data from "account"."""
input account_order_by {
  access_token: order_by
  expires_at: order_by
  id: order_by
  id_token: order_by
  oauth_token: order_by
  oauth_token_secret: order_by
  provider: order_by
  provider_account_id: order_by
  refresh_token: order_by
  scope: order_by
  session_state: order_by
  token_type: order_by
  type: order_by
  user_id: order_by
}

"""primary key columns input for table: account"""
input account_pk_columns_input {
  id: Int!
}

"""
select columns of table "account"
"""
enum account_select_column {
  """column name"""
  access_token

  """column name"""
  expires_at

  """column name"""
  id

  """column name"""
  id_token

  """column name"""
  oauth_token

  """column name"""
  oauth_token_secret

  """column name"""
  provider

  """column name"""
  provider_account_id

  """column name"""
  refresh_token

  """column name"""
  scope

  """column name"""
  session_state

  """column name"""
  token_type

  """column name"""
  type

  """column name"""
  user_id
}

"""
input type for updating data in table "account"
"""
input account_set_input {
  access_token: String
  expires_at: Int
  id: Int
  id_token: String
  oauth_token: String
  oauth_token_secret: String
  provider: String
  provider_account_id: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  user_id: String
}

"""aggregate stddev on columns"""
type account_stddev_fields {
  expires_at: Float
  id: Float
}

"""aggregate stddev_pop on columns"""
type account_stddev_pop_fields {
  expires_at: Float
  id: Float
}

"""aggregate stddev_samp on columns"""
type account_stddev_samp_fields {
  expires_at: Float
  id: Float
}

"""aggregate sum on columns"""
type account_sum_fields {
  expires_at: Int
  id: Int
}

"""
update columns of table "account"
"""
enum account_update_column {
  """column name"""
  access_token

  """column name"""
  expires_at

  """column name"""
  id

  """column name"""
  id_token

  """column name"""
  oauth_token

  """column name"""
  oauth_token_secret

  """column name"""
  provider

  """column name"""
  provider_account_id

  """column name"""
  refresh_token

  """column name"""
  scope

  """column name"""
  session_state

  """column name"""
  token_type

  """column name"""
  type

  """column name"""
  user_id
}

"""aggregate var_pop on columns"""
type account_var_pop_fields {
  expires_at: Float
  id: Float
}

"""aggregate var_samp on columns"""
type account_var_samp_fields {
  expires_at: Float
  id: Float
}

"""aggregate variance on columns"""
type account_variance_fields {
  expires_at: Float
  id: Float
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "account"
  """
  delete_account(
    """filter the rows which have to be deleted"""
    where: account_bool_exp!
  ): account_mutation_response

  """
  delete single row from the table: "account"
  """
  delete_account_by_pk(id: Int!): account

  """
  delete data from the table: "user"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  delete single row from the table: "user"
  """
  delete_user_by_pk(id: String!): user

  """
  delete data from the table: "verification_token"
  """
  delete_verification_token(
    """filter the rows which have to be deleted"""
    where: verification_token_bool_exp!
  ): verification_token_mutation_response

  """
  delete single row from the table: "verification_token"
  """
  delete_verification_token_by_pk(token: String!): verification_token

  """
  insert data into the table: "account"
  """
  insert_account(
    """the rows to be inserted"""
    objects: [account_insert_input!]!

    """on conflict condition"""
    on_conflict: account_on_conflict
  ): account_mutation_response

  """
  insert a single row into the table: "account"
  """
  insert_account_one(
    """the row to be inserted"""
    object: account_insert_input!

    """on conflict condition"""
    on_conflict: account_on_conflict
  ): account

  """
  insert data into the table: "user"
  """
  insert_user(
    """the rows to be inserted"""
    objects: [user_insert_input!]!

    """on conflict condition"""
    on_conflict: user_on_conflict
  ): user_mutation_response

  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    """the row to be inserted"""
    object: user_insert_input!

    """on conflict condition"""
    on_conflict: user_on_conflict
  ): user

  """
  insert data into the table: "verification_token"
  """
  insert_verification_token(
    """the rows to be inserted"""
    objects: [verification_token_insert_input!]!

    """on conflict condition"""
    on_conflict: verification_token_on_conflict
  ): verification_token_mutation_response

  """
  insert a single row into the table: "verification_token"
  """
  insert_verification_token_one(
    """the row to be inserted"""
    object: verification_token_insert_input!

    """on conflict condition"""
    on_conflict: verification_token_on_conflict
  ): verification_token

  """
  update data of the table: "account"
  """
  update_account(
    """increments the numeric columns with given value of the filtered values"""
    _inc: account_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: account_set_input

    """filter the rows which have to be updated"""
    where: account_bool_exp!
  ): account_mutation_response

  """
  update single row of the table: "account"
  """
  update_account_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: account_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: account_set_input
    pk_columns: account_pk_columns_input!
  ): account

  """
  update data of the table: "user"
  """
  update_user(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user

  """
  update data of the table: "verification_token"
  """
  update_verification_token(
    """sets the columns of the filtered rows to the given values"""
    _set: verification_token_set_input

    """filter the rows which have to be updated"""
    where: verification_token_bool_exp!
  ): verification_token_mutation_response

  """
  update single row of the table: "verification_token"
  """
  update_verification_token_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: verification_token_set_input
    pk_columns: verification_token_pk_columns_input!
  ): verification_token
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "account"
  """
  account(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!

  """
  fetch aggregated fields from the table: "account"
  """
  account_aggregate(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): account_aggregate!

  """fetch data from the table: "account" using primary key columns"""
  account_by_pk(id: Int!): account

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: String!): user

  """
  fetch data from the table: "verification_token"
  """
  verification_token(
    """distinct select on columns"""
    distinct_on: [verification_token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [verification_token_order_by!]

    """filter the rows returned"""
    where: verification_token_bool_exp
  ): [verification_token!]!

  """
  fetch aggregated fields from the table: "verification_token"
  """
  verification_token_aggregate(
    """distinct select on columns"""
    distinct_on: [verification_token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [verification_token_order_by!]

    """filter the rows returned"""
    where: verification_token_bool_exp
  ): verification_token_aggregate!

  """
  fetch data from the table: "verification_token" using primary key columns
  """
  verification_token_by_pk(token: String!): verification_token
}

type subscription_root {
  """
  fetch data from the table: "account"
  """
  account(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): [account!]!

  """
  fetch aggregated fields from the table: "account"
  """
  account_aggregate(
    """distinct select on columns"""
    distinct_on: [account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [account_order_by!]

    """filter the rows returned"""
    where: account_bool_exp
  ): account_aggregate!

  """fetch data from the table: "account" using primary key columns"""
  account_by_pk(id: Int!): account

  """
  fetch data from the table: "user"
  """
  user(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!

  """
  fetch aggregated fields from the table: "user"
  """
  user_aggregate(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): user_aggregate!

  """fetch data from the table: "user" using primary key columns"""
  user_by_pk(id: String!): user

  """
  fetch data from the table: "verification_token"
  """
  verification_token(
    """distinct select on columns"""
    distinct_on: [verification_token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [verification_token_order_by!]

    """filter the rows returned"""
    where: verification_token_bool_exp
  ): [verification_token!]!

  """
  fetch aggregated fields from the table: "verification_token"
  """
  verification_token_aggregate(
    """distinct select on columns"""
    distinct_on: [verification_token_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [verification_token_order_by!]

    """filter the rows returned"""
    where: verification_token_bool_exp
  ): verification_token_aggregate!

  """
  fetch data from the table: "verification_token" using primary key columns
  """
  verification_token_by_pk(token: String!): verification_token
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
The User model is for information such as the user's name and email address.  Email address is optional, but if one is specified for a User then it must be unique.


columns and relationships of "user"

"""
type user {
  created_at: timestamptz!
  email: String
  email_verified: timestamptz
  id: String!
  image: String
  name: String
  updated_at: timestamptz!
}

"""
aggregated selection of "user"
"""
type user_aggregate {
  aggregate: user_aggregate_fields
  nodes: [user!]!
}

"""
aggregate fields of "user"
"""
type user_aggregate_fields {
  count(columns: [user_select_column!], distinct: Boolean): Int!
  max: user_max_fields
  min: user_min_fields
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  created_at: timestamptz_comparison_exp
  email: String_comparison_exp
  email_verified: timestamptz_comparison_exp
  id: String_comparison_exp
  image: String_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "user"
"""
enum user_constraint {
  """unique or primary key constraint"""
  User_pkey

  """unique or primary key constraint"""
  user_email_key
}

"""
input type for inserting data into table "user"
"""
input user_insert_input {
  created_at: timestamptz
  email: String
  email_verified: timestamptz
  id: String
  image: String
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type user_max_fields {
  created_at: timestamptz
  email: String
  email_verified: timestamptz
  id: String
  image: String
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type user_min_fields {
  created_at: timestamptz
  email: String
  email_verified: timestamptz
  id: String
  image: String
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""
on conflict condition type for table "user"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "user"."""
input user_order_by {
  created_at: order_by
  email: order_by
  email_verified: order_by
  id: order_by
  image: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  id: String!
}

"""
select columns of table "user"
"""
enum user_select_column {
  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  email_verified

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "user"
"""
input user_set_input {
  created_at: timestamptz
  email: String
  email_verified: timestamptz
  id: String
  image: String
  name: String
  updated_at: timestamptz
}

"""
update columns of table "user"
"""
enum user_update_column {
  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  email_verified

  """column name"""
  id

  """column name"""
  image

  """column name"""
  name

  """column name"""
  updated_at
}

"""
columns and relationships of "verification_token"
"""
type verification_token {
  expires: timestamptz!
  identifier: String!
  token: String!
}

"""
aggregated selection of "verification_token"
"""
type verification_token_aggregate {
  aggregate: verification_token_aggregate_fields
  nodes: [verification_token!]!
}

"""
aggregate fields of "verification_token"
"""
type verification_token_aggregate_fields {
  count(columns: [verification_token_select_column!], distinct: Boolean): Int!
  max: verification_token_max_fields
  min: verification_token_min_fields
}

"""
Boolean expression to filter rows from the table "verification_token". All fields are combined with a logical 'AND'.
"""
input verification_token_bool_exp {
  _and: [verification_token_bool_exp!]
  _not: verification_token_bool_exp
  _or: [verification_token_bool_exp!]
  expires: timestamptz_comparison_exp
  identifier: String_comparison_exp
  token: String_comparison_exp
}

"""
unique or primary key constraints on table "verification_token"
"""
enum verification_token_constraint {
  """unique or primary key constraint"""
  verification_token_pkey
}

"""
input type for inserting data into table "verification_token"
"""
input verification_token_insert_input {
  expires: timestamptz
  identifier: String
  token: String
}

"""aggregate max on columns"""
type verification_token_max_fields {
  expires: timestamptz
  identifier: String
  token: String
}

"""aggregate min on columns"""
type verification_token_min_fields {
  expires: timestamptz
  identifier: String
  token: String
}

"""
response of any mutation on the table "verification_token"
"""
type verification_token_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [verification_token!]!
}

"""
on conflict condition type for table "verification_token"
"""
input verification_token_on_conflict {
  constraint: verification_token_constraint!
  update_columns: [verification_token_update_column!]! = []
  where: verification_token_bool_exp
}

"""Ordering options when selecting data from "verification_token"."""
input verification_token_order_by {
  expires: order_by
  identifier: order_by
  token: order_by
}

"""primary key columns input for table: verification_token"""
input verification_token_pk_columns_input {
  token: String!
}

"""
select columns of table "verification_token"
"""
enum verification_token_select_column {
  """column name"""
  expires

  """column name"""
  identifier

  """column name"""
  token
}

"""
input type for updating data in table "verification_token"
"""
input verification_token_set_input {
  expires: timestamptz
  identifier: String
  token: String
}

"""
update columns of table "verification_token"
"""
enum verification_token_update_column {
  """column name"""
  expires

  """column name"""
  identifier

  """column name"""
  token
}